// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: greeter.proto

package pb

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GRT service

func NewGRTEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for GRT service

type GRTService interface {
	HL(ctx context.Context, in *REQ, opts ...client.CallOption) (*RES, error)
}

type gRTService struct {
	c    client.Client
	name string
}

func NewGRTService(name string, c client.Client) GRTService {
	return &gRTService{
		c:    c,
		name: name,
	}
}

func (c *gRTService) HL(ctx context.Context, in *REQ, opts ...client.CallOption) (*RES, error) {
	req := c.c.NewRequest(c.name, "GRT.HL", in)
	out := new(RES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GRT service

type GRTHandler interface {
	HL(context.Context, *REQ, *RES) error
}

func RegisterGRTHandler(s server.Server, hdlr GRTHandler, opts ...server.HandlerOption) error {
	type gRT interface {
		HL(ctx context.Context, in *REQ, out *RES) error
	}
	type GRT struct {
		gRT
	}
	h := &gRTHandler{hdlr}
	return s.Handle(s.NewHandler(&GRT{h}, opts...))
}

type gRTHandler struct {
	GRTHandler
}

func (h *gRTHandler) HL(ctx context.Context, in *REQ, out *RES) error {
	return h.GRTHandler.HL(ctx, in, out)
}
