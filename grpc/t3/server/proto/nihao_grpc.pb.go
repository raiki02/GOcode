// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.0--rc3
// source: nihao.proto

package fuwu

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NihaoClient is the client API for Nihao service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NihaoClient interface {
	Nihao(ctx context.Context, in *NihaoRequest, opts ...grpc.CallOption) (*NihaoResponse, error)
}

type nihaoClient struct {
	cc grpc.ClientConnInterface
}

func NewNihaoClient(cc grpc.ClientConnInterface) NihaoClient {
	return &nihaoClient{cc}
}

func (c *nihaoClient) Nihao(ctx context.Context, in *NihaoRequest, opts ...grpc.CallOption) (*NihaoResponse, error) {
	out := new(NihaoResponse)
	err := c.cc.Invoke(ctx, "/Nihao/Nihao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NihaoServer is the server API for Nihao service.
// All implementations must embed UnimplementedNihaoServer
// for forward compatibility
type NihaoServer interface {
	Nihao(context.Context, *NihaoRequest) (*NihaoResponse, error)
	mustEmbedUnimplementedNihaoServer()
}

// UnimplementedNihaoServer must be embedded to have forward compatible implementations.
type UnimplementedNihaoServer struct {
}

func (UnimplementedNihaoServer) Nihao(context.Context, *NihaoRequest) (*NihaoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nihao not implemented")
}
func (UnimplementedNihaoServer) mustEmbedUnimplementedNihaoServer() {}

// UnsafeNihaoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NihaoServer will
// result in compilation errors.
type UnsafeNihaoServer interface {
	mustEmbedUnimplementedNihaoServer()
}

func RegisterNihaoServer(s grpc.ServiceRegistrar, srv NihaoServer) {
	s.RegisterService(&Nihao_ServiceDesc, srv)
}

func _Nihao_Nihao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NihaoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NihaoServer).Nihao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Nihao/Nihao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NihaoServer).Nihao(ctx, req.(*NihaoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Nihao_ServiceDesc is the grpc.ServiceDesc for Nihao service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Nihao_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Nihao",
	HandlerType: (*NihaoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Nihao",
			Handler:    _Nihao_Nihao_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nihao.proto",
}
